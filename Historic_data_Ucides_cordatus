####libraries####
library(ncdf4)
library(fields)
library(abind)
library(maptools)
################

#set directory
setwd("/Volumes/GoogleDrive/Shared Drives/TrEnCh/Projects/Murilo/Sea_surface_daily_temp/Sea surface daily mean temp/")
setwd ("F:/Abiotic dataset/SST/historic data/NOAA/Sea surface daily mean temp")

#load data
data.1982=nc_open("sst.day.mean.2017.nc")
data.1983=nc_open("sst.day.mean.2018.nc")

data.1984=nc_open("sst.day.mean.1984.nc")
data.1985=nc_open("sst.day.mean.1985.nc")
data.1986=nc_open("sst.day.mean.1986.nc")
data.1987=nc_open("sst.day.mean.1987.nc")
data.1988=nc_open("sst.day.mean.1988.nc")
data.1989=nc_open("sst.day.mean.1989.nc")
data.1990=nc_open("sst.day.mean.1990.nc")
data.1991=nc_open("sst.day.mean.1991.nc")
data.1992=nc_open("sst.day.mean.1992.nc")
data.1993=nc_open("sst.day.mean.1993.nc")
data.1994=nc_open("sst.day.mean.1994.nc")
data.1995=nc_open("sst.day.mean.1995.nc")
data.1996=nc_open("sst.day.mean.1996.nc")
data.1997=nc_open("sst.day.mean.1997.nc")
data.1998=nc_open("sst.day.mean.1998.nc")
data.1999=nc_open("sst.day.mean.1999.nc")
data.2000=nc_open("sst.day.mean.2000.nc")
data.2001=nc_open("sst.day.mean.2001.nc")
data.2002=nc_open("sst.day.mean.2002.nc")
data.2003=nc_open("sst.day.mean.2003.nc")
data.2004=nc_open("sst.day.mean.2004.nc")
data.2005=nc_open("sst.day.mean.2005.nc")
data.2006=nc_open("sst.day.mean.2006.nc")
data.2007=nc_open("sst.day.mean.2007.nc")
data.2008=nc_open("sst.day.mean.2008.nc")
data.2009=nc_open("sst.day.mean.2009.nc")
data.2010=nc_open("sst.day.mean.2010.nc")
data.2011=nc_open("sst.day.mean.2011.nc")
data.2012=nc_open("sst.day.mean.2012.nc")
data.2013=nc_open("sst.day.mean.2013.nc")
data.2014=nc_open("sst.day.mean.2014.nc")
data.2015=nc_open("sst.day.mean.2015.nc")
data.2016=nc_open("sst.day.mean.2016.nc")
data.2017=nc_open("sst.day.mean.2017.nc")
data.2018=nc_open("sst.day.mean.2018.nc")
data.2019=nc_open("sst.day.mean.2019.nc")

#extract sst, lon, lat, time fisrt year
temp=ncvar_get(data.1982,"sst")
lons= ncvar_get(data.1982,"lon") #get info about long
lats= ncvar_get(data.1982,"lat") #get info about latitude
times= ncvar_get(data.1982,"time") #julian date, calendar day, since 1800-01-01
times1= as.Date(times, origin="1800-01-01")#change to day of year
times1

#extract sst, lon, lat, time second year
temp2=ncvar_get(data.1983,"sst")
lons2= ncvar_get(data.1983,"lon") #get info about long
lats2= ncvar_get(data.1983,"lat") #get info about latitude
times2= ncvar_get(data.1983,"time") #julian date, calendar day, since 1800-01-01
times3= as.Date(times2, origin="1800-01-01")#change to day of year
times3

#convert longituide
convert.lon= function(r0) ifelse(r0 > 180, -360 + r0, r0)
lons= convert.lon(lons)
lons2= convert.lon(lons2)

#subset data to area of interest ##
lats.sel= which(lats> (-28) &lats<(29))#specific area of interest in atlantic ocean
lons.sel= which(lons>(-100)&lons<(-33))#specific area of interest in atlantic ocean
surface_temp=temp[lons.sel,lats.sel,] #using the specified area
dim(surface_temp)

lats.sel2= which(lats2> (-28) &lats2<(29))#specific area of interest in atlantic ocean
lons.sel2= which(lons2>(-100)&lons2<(-33))#specific area of interest in atlantic ocean
surface_temp2=temp2[lons.sel2,lats.sel2,] #using the specified area
dim(surface_temp2)

#abind merge the two files
temp.82_83= abind(surface_temp, surface_temp2, along=3)
dim(temp.82_83)

#for each latitude, after the last NA delete values after the 7Â°grid cell (approx. 200km)
#remove pacific ocean info
for(lat.id in 1:228){
  na1=which.max(is.na(temp.82_83[,lat.id,]))
  temp.82_83[1:na1,lat.id,]<-NA  
}

#delete +7 cell data from South American Atlantic coast 
nend= dim(temp.82_83)[1]
for(lat.id in 1:150){
  na1= min(which(is.na(temp.82_83[,lat.id,1])))
  #delete values before first NA
  temp.82_83[1:na1,lat.id,]<-NA 
  #find coast
  coast= min(which(!is.na(temp.82_83[,lat.id,1]))) 
  #find next island na
  w.isl=min(which(is.na(temp.82_83[coast:nend,lat.id,1])))  
  while( is.finite(w.isl) ){
    #keep 7 coastal cells on each side
    if ((coast+w.isl-7)>(coast+7)) temp.82_83[(coast+7):(coast+w.isl-7),lat.id,]<-NA
    #find next coast
    ind= coast+w.isl
    coast= min(which(!is.na(temp.82_83[ind:nend,lat.id,1]))) 
    coast= ind+coast
    #find next island
    w.isl=min(which(is.na(temp.82_83[coast:nend,lat.id,1])))
  }
  #last coastal grid cells
  if(coast+7 <nend) temp.82_83[(coast+7):nend,lat.id,]<-NA 
}

#####removing cells by "blocks"
for(lat.id in 151:174){
  na2=which.min(is.na(temp.82_83[,lat.id,]))  
  if((na2+97)<dim(temp.82_83)[1]) temp.82_83[(na2+97):dim(temp.82_83)[1],lat.id,]<-NA  
}
for(lat.id in 175){
  na2=which.min(is.na(temp.82_83[,lat.id,]))  
  if((na2+100)<dim(temp.82_83)[1]) temp.82_83[(na2+100):dim(temp.82_83)[1],lat.id,]<-NA
}
for(lat.id in 176:177){
  na2=which.min(is.na(temp.82_83[,lat.id,]))  
  if((na2+145)<dim(temp.82_83)[1]) temp.82_83[(na2+145):dim(temp.82_83)[1],lat.id,]<-NA
}
for(lat.id in 178:183){
  na2=which.min(is.na(temp.82_83[,lat.id,]))  
  if((na2+110)<dim(temp.82_83)[1]) temp.82_83[(na2+110):dim(temp.82_83)[1],lat.id,]<-NA
}
for(lat.id in 184:185){
  na2=which.min(is.na(temp.82_83[,lat.id,]))  
  if((na2+110)<dim(temp.82_83)[1]) temp.82_83[(na2+110):dim(temp.82_83)[1],lat.id,]<-NA
}
for(lat.id in 186:189){
  na2=which.min(is.na(temp.82_83[,lat.id,]))  
  if((na2+125)<dim(temp.82_83)[1]) temp.82_83[(na2+125):dim(temp.82_83)[1],lat.id,]<-NA
}
for(lat.id in 189:196){
  na2=which.min(is.na(temp.82_83[,lat.id,]))  
  if((na2+115)<dim(temp.82_83)[1]) temp.82_83[(na2+115):dim(temp.82_83)[1],lat.id,]<-NA
}
for(lat.id in 197:207){
  na2=which.min(is.na(temp.82_83[,lat.id,]))  
  if((na2+112)<dim(temp.82_83)[1]) temp.82_83[(na2+112):dim(temp.82_83)[1],lat.id,]<-NA
}
for(lat.id in 207:213){
  na2=which.min(is.na(temp.82_83[,lat.id,]))  
  if((na2+98)<dim(temp.82_83)[1]) temp.82_83[(na2+98):dim(temp.82_83)[1],lat.id,]<-NA
}
for(lat.id in 213:218){
  na2=which.min(is.na(temp.82_83[,lat.id,]))  
  if((na2+87)<dim(temp.82_83)[1]) temp.82_83[(na2+87):dim(temp.82_83)[1],lat.id,]<-NA
}
for(lat.id in 214:221){
  na2=which.min(is.na(temp.82_83[,lat.id,]))  
  if((na2+85)<dim(temp.82_83)[1]) temp.82_83[(na2+85):dim(temp.82_83)[1],lat.id,]<-NA
}
for(lat.id in 222:228){
  na2=which.min(is.na(temp.82_83[,lat.id,]))  
  if((na2+75)<dim(temp.82_83)[1]) temp.82_83[(na2+75):dim(temp.82_83)[1],lat.id,]<-NA
}

#update latitudes and longitudes
lons= lons[lons.sel]
lats= lats[lats.sel]
lons2= lons2[lons.sel2]
lats2= lats2[lats.sel2]

#plot
my.colors = colorRampPalette(c("#5E85B8","#EDF0C0","#C13127"))#colors to use in graphs
e<-(c(15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45))
image.plot(lons,lats,temp.82_83[,,92], col=my.colors(34),legend.lab = "Superficial Sea Temperature",axis.args=list(at=e, labels=names(e)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

#Set species' parameters Ucides cordatus
To=12.37 ###lower developmental temperature
G=285.71 ### daily growing degree days

#survival function
survi.function=function(day,temp){
  surv= 1.161898  -1.289353e-01*day + 2.447864e-02*day^2 -9.780041e-04*day^3 + 8.937547e-06*day^4 -5.323727e-03*temp +4.684993e-03*day^1*temp  -1.010040e-03*day^2*temp  +3.879397e-05*day^3*temp  -3.207424e-07*day^4*temp
  #constraint from zero to 1
  surv[surv<0]=0
  surv[surv>1]=1
  return(surv)  
}

# selecting days from October 1st to December 31th and January 1st to March 31th (information for each season) 
inds=cbind(c(1,92),c(91,212))
times4=c(1:212)

#make arrays for output, add dimension for future periods
#development
devel.out= array(NA, dim=c(length(lons),length(lats),length(times4)))
#survival
surv.out= array(NA, dim=c(length(lons),length(lats),length(times4)))

for(lon.k in 1:length(lons)){ #loop through longitude
  lats.sel2= which(!is.na(temp.82_83[lon.k,,1]))#find latitudes with data
  
  if(length(lats.sel2)>0){ #check there's cells with data
    
    for(lat.k in lats.sel2){ #loop through latitudes with data
      
      for(yr.k in 1:nrow(inds)){ #loop through seasons
        
        #extract start and end dates
        inds.seas= inds[yr.k,1]:inds[yr.k,2] 
        
        #estimate growing degree days
        GDDs= temp.82_83[lon.k,lat.k,inds.seas]-To #how many growing degree days per day
        #cummulative sum of GDDs
        cumGDDs=cumsum(GDDs) 
        
        for(time.k in 1:length(inds.seas)){ #estimate development time starting at different days
          
          #substract off starting value
          cumGDDs.t= cumGDDs-cumGDDs[time.k]
          
          #find first date the exceed G
          dev.ind= which.max(cumGDDs.t>G) - time.k  #development duration
          devel.out[lon.k,lat.k,time.k]= dev.ind
          #To sAVE: DOY days.inds[inds.seas[dev.ind]]
          
          #estimate survival until reaching G
          #mean temp
          if(dev.ind>1){#if complex development
            temps= mean(temp.82_83[lon.k,lat.k,inds.seas[time.k]:inds.seas[dev.ind]])
            #estimate survival
            surv.out[lon.k,lat.k,time.k]= survi.function(dev.ind-time.k, temps)
          } #end check complete development
        } #end loop timing
      } #end loop seasons
    }#end latitude loop
  } #end check for data
} #end longitude loop

devel.out2=devel.out[,,1:183]#remove aditional days. Days from 
surv.out2=surv.out[,,1:183]#remove aditional days
#plot out day to development assuming development starts on day 1 
devel.out2=replace(devel.out2,devel.out2<15,NA)
e<-(c(15,17,18,19,21,23,25,27,29,31,33,35,37,39,41,43,45,50,55,60,65,70,75,80))
image.plot(lons,lats,devel.out2[,,103], col=my.colors(34),legend.lab = "days to megalopae phase",axis.args=list(at=e, labels=names(e)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

#plot out corresponding survival
#surv.out2<-replace(surv.out2, surv.out2 > 0.99 , NA)
#surv.out2<-replace(surv.out2, surv.out2 < 0.01 , NA)
s<-(c(0,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.7,0.8,0.9,1))
image.plot(lons,lats,surv.out2[,,3],col=my.colors(1000),legend.lab = "survival to megalopae phase",axis.args=list(at=s, labels=names(s)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

#mean survival, devel time and temp by row, average by year
for (survival.loop in 1:nrow(lats)){
surv.mean=mean(surv.out2[,survival.loop,],trim=0,na.rm=TRUE)
write.table(print(surv.mean),file="surv_row.csv", append=TRUE,sep=",",col.names=FALSE,row.names=FALSE)
}

for (devel.time.loop in 1:nrow(lats)){
  devel.mean=mean(devel.out2[,devel.time.loop,],trim=0,na.rm=TRUE)
  write.table(print(devel.mean),file="devel_row.csv", append=TRUE,sep=",",col.names=FALSE,row.names=FALSE)
}

for (temp.loop in 1:nrow(lats)){
  temp.mean=mean(temp.82_83[,temp.loop,1:183],trim=0,na.rm=TRUE)
  write.table(print(temp.mean),file="temp_row.csv", append=TRUE,sep=",",col.names=FALSE,row.names=FALSE)
}

#plot
surv.lat2= apply(surv.out2, MARGIN=c(1,2), FUN=mean, na.rm=TRUE)
s<-(c(0,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.7,0.8,0.9,1))
image.plot(lons,lats,surv.lat2,col=my.colors(1000),legend.lab = "survival to megalopae phase",axis.args=list(at=s, labels=names(s)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

temp.out=array(temp.82_83, dim=c(length(lons),length(lats),length(times4),nrow(inds)))
temp.lat2= apply(temp.out, MARGIN=c(1,2), FUN=mean, na.rm=TRUE)
e<-(c(22,24,26,28,30,32))
image.plot(lons,lats,temp.lat2,col=my.colors(1000),legend.only=FALSE, zlim=c(22,32),axis.args=list(at=e, labels=names(e)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

#mean survival, devel and temp for each season
mean.surv=mean(surv.out2[,,],trim=0,na.rm=TRUE)
mean.surv

mean.devel=mean(devel.out2[,,],trim=0,na.rm=TRUE)
mean.devel

mean.temp=mean(temp.82_83[,,1:183],trim=0,na.rm=TRUE)
mean.temp
