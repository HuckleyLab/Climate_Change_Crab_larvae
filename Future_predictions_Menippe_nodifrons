
###libraries###
library(ncdf4)
library(fields)
library(maptools)
library(abind)
###############

###LOAD DATA###
#ACCESS
setwd("/Volumes/GoogleDrive/Shared Drives/TrEnCh/Projects/Murilo/SST future predictions/ACESS1.3 RCP8.5/")
setwd("F:/Abiotic dataset/SST/future predictions/RCP 8.5")#select the folder RCP4.5 or RCP8.5
dir()#check what are inside the directory
Acess_2016_2025=nc_open("tos_day_ACCESS1-3_rcp85_r1i1p1_20160101-20251231.nc")#open the nc file
Acess_2016_2025=nc_open("tos_day_ACCESS1-3_rcp85_r1i1p1_20260101-20351231.nc")
Acess_2016_2025=nc_open("tos_day_ACCESS1-3_rcp85_r1i1p1_20360101-20451231.nc")
Acess_2016_2025=nc_open("tos_day_ACCESS1-3_rcp85_r1i1p1_20460101-20551231.nc")
Acess_2016_2025=nc_open("tos_day_ACCESS1-3_rcp85_r1i1p1_20560101-20651231.nc")
Acess_2016_2025=nc_open("tos_day_ACCESS1-3_rcp85_r1i1p1_20660101-20751231.nc")
Acess_2016_2025=nc_open("tos_day_ACCESS1-3_rcp85_r1i1p1_20760101-20851231.nc")
Acess_2016_2025=nc_open("tos_day_ACCESS1-3_rcp85_r1i1p1_20860101-20951231.nc")
#MRI
mri_2016_2025=nc_open("tos_day_MRI-CGCM3_rcp85_r1i1p1_20160101-20251231.nc")
mri_2016_2025=nc_open("tos_day_MRI-CGCM3_rcp85_r1i1p1_20260101-20351231.nc")
mri_2016_2025=nc_open("tos_day_MRI-CGCM3_rcp85_r1i1p1_20360101-20451231.nc")
mri_2016_2025=nc_open("tos_day_MRI-CGCM3_rcp85_r1i1p1_20460101-20551231.nc")
mri_2016_2025=nc_open("tos_day_MRI-CGCM3_rcp85_r1i1p1_20560101-20651231.nc")
mri_2016_2025=nc_open("tos_day_MRI-CGCM3_rcp85_r1i1p1_20660101-20751231.nc")
mri_2016_2025=nc_open("tos_day_MRI-CGCM3_rcp85_r1i1p1_20760101-20851231.nc")
mri_2016_2025=nc_open("tos_day_MRI-CGCM3_rcp85_r1i1p1_20860101-20951231.nc")
#CNRM
cnrm_2016_2025=nc_open("tos_day_CNRM-CM5_rcp85_r1i1p1_20160101-20251231.nc")
cnrm_2016_2025=nc_open("tos_day_CNRM-CM5_rcp85_r1i1p1_20260101-20351231.nc")
cnrm_2016_2025=nc_open("tos_day_CNRM-CM5_rcp85_r1i1p1_20360101-20451231.nc")
cnrm_2016_2025=nc_open("tos_day_CNRM-CM5_rcp85_r1i1p1_20460101-20551231.nc")
cnrm_2016_2025=nc_open("tos_day_CNRM-CM5_rcp85_r1i1p1_20560101-20651231.nc")
cnrm_2016_2025=nc_open("tos_day_CNRM-CM5_rcp85_r1i1p1_20660101-20751231.nc")
cnrm_2016_2025=nc_open("tos_day_CNRM-CM5_rcp85_r1i1p1_20760101-20851231.nc")
cnrm_2016_2025=nc_open("tos_day_CNRM-CM5_rcp85_r1i1p1_20860101-20951231.nc")

###extract variables tos,lon,lat and time###
sea_surface=ncvar_get(Acess_2016_2025,"tos")#get info bout SST
print(sea_surface)#check info about nc file
dim(sea_surface)#check the file dimensions
sea_surface = sea_surface - 273.15# convert units from kelvin to celcius
lons= ncvar_get(Acess_2016_2025,"lon") #get info about long
lons= lons[,1]#select data from longitude
lats= ncvar_get(Acess_2016_2025,"lat") #get info about latitude
lats= lats[1,]#select data from latitude
times= ncvar_get(Acess_2016_2025,"time") #get info about time
times1= as.Date(times, origin="0001-01-01")#convert to Julian date, since 0001-01-01
times1#check if the conversation is correct

#estimate years and days
years=as.numeric(format(times1,"%Y"))
days= as.numeric(format(times1,"%j"))

#convert longituide
convert.lon= function(r0) ifelse(r0 > 180, -360 + r0, r0)
lons= convert.lon(lons)

#subset data to area of interest ##
lats.sel= which(lats> (-28) &lats<(29))#specific area of interest in atlantic ocean
lons.sel= which(lons>(-100)&lons<(-33))#specific area of interest in atlantic ocean
surface_temp=sea_surface[lons.sel,lats.sel,] #using the specified area
dim(surface_temp)#check dimensions

#remove pacific ocean info
for(lat.id in 1:117){
  na1=which.max(is.na(surface_temp[,lat.id,]))
  surface_temp[1:na1,lat.id,]<-NA  
}

#delete +4 cell data from South American Atlantic coast 
nend= dim(surface_temp)[1]
for(lat.id in 1:89){
  na1= min(which(is.na(surface_temp[,lat.id,1])))
  #delete values before first NA
  surface_temp[1:na1,lat.id,]<-NA 
  #find coast
  coast= min(which(!is.na(surface_temp[,lat.id,1]))) 
  #find next island na
  w.isl=min(which(is.na(surface_temp[coast:nend,lat.id,1])))  
  while( is.finite(w.isl) ){
    #keep 4 coastal cells on each side
    if ((coast+w.isl-4)>(coast+4)) surface_temp[(coast+4):(coast+w.isl-4),lat.id,]<-NA
    #find next coast
    ind= coast+w.isl
    coast= min(which(!is.na(surface_temp[ind:nend,lat.id,1]))) 
    coast= ind+coast
    #find next island
    w.isl=min(which(is.na(surface_temp[coast:nend,lat.id,1])))
  }
  #last coastal grid cells
  if(coast+4 <nend) surface_temp[(coast+4):nend,lat.id,]<-NA 
}

#removing cells without islands
for(lat.id in 89){
  na2=which.min(is.na(surface_temp[,lat.id,]))  
  if((na2+96)<dim(surface_temp)[1]) surface_temp[(na2+96):dim(surface_temp)[1],lat.id,]<-NA  
} 
for(lat.id in 90:100){
  na2=which.min(is.na(surface_temp[,lat.id,]))  
  if((na2+26)<dim(surface_temp)[1]) surface_temp[(na2+26):dim(surface_temp)[1],lat.id,]<-NA  
} 
for(lat.id in 101){
  na2=which.min(is.na(surface_temp[,lat.id,]))  
  if((na2+24)<dim(surface_temp)[1]) surface_temp[(na2+24):dim(surface_temp)[1],lat.id,]<-NA  
} 
for(lat.id in 102){
  na2=which.min(is.na(surface_temp[,lat.id,]))  
  if((na2+37)<dim(surface_temp)[1]) surface_temp[(na2+37):dim(surface_temp)[1],lat.id,]<-NA  
}
for(lat.id in 103){
  na2=which.min(is.na(surface_temp[,lat.id,]))  
  if((na2+29)<dim(surface_temp)[1]) surface_temp[(na2+29):dim(surface_temp)[1],lat.id,]<-NA  
}
for(lat.id in 104:109){
  na2=which.min(is.na(surface_temp[,lat.id,]))  
  if((na2+30)<dim(surface_temp)[1]) surface_temp[(na2+30):dim(surface_temp)[1],lat.id,]<-NA  
}
for(lat.id in 110:112){
  na2=which.min(is.na(surface_temp[,lat.id,]))  
  if((na2+28)<dim(surface_temp)[1]) surface_temp[(na2+28):dim(surface_temp)[1],lat.id,]<-NA  
} 
for(lat.id in 113:114){
  na2=which.min(is.na(surface_temp[,lat.id,]))  
  if((na2+23)<dim(surface_temp)[1]) surface_temp[(na2+23):dim(surface_temp)[1],lat.id,]<-NA  
} 
for(lat.id in 115:117){
  na2=which.min(is.na(surface_temp[,lat.id,]))  
  if((na2+21)<dim(surface_temp)[1]) surface_temp[(na2+21):dim(surface_temp)[1],lat.id,]<-NA  
}

#update latitudes and longitudes
lons= lons[lons.sel]
lats= lats[lats.sel]

#Plot
my.colors = colorRampPalette(c("#5E85B8","#EDF0C0","#C13127"))#colors to use in graphs
e<-(c(15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45))
image.plot(lons,lats,surface_temp[,,1099], col=my.colors(34),legend.lab = "Superficial Sea Temperature",axis.args=list(at=e, labels=names(e)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

#Set species' parameters Menippe nodifrons
To=9.8846 ###lower developmental temperature
G=384.6154 ### daily growing degree days

#survival function
survi.function=function(day,temp){
  surv= 2.7931035  -3.3789256*day + 1.7749461*day^2 -0.2621086*day^3 + 0.0122824*day^4 -0.0720098*temp +0.1335313*day^1*temp  -0.0693260*day^2*temp  +0.0101202*day^3*temp  -0.0004729*day^4*temp
  #constraint from zero to 1
  surv[surv<0]=0
  surv[surv>1]=1
  return(surv)  
}

# selecting days from October 1st to December 31th and January 1st to March 31th (information for each season) 
inds=cbind(c(1,92),c(91,242))
times4=c(1:242)

# selecting days from January 1st to March 31th and October 1st to December 31th of yeach year
times2=c(1:121,275:485,640:850,1005:1216,1370:1583,1737:1946,2101:2311,2466:2677,2831:3043,3197:3407,3562:3653)
#select seasons, start and end dates
#inds=cbind(c(275, 640, 1005, 1370, 1737, 2101, 2466, 2831, 3197, 3562),c(457,821,1186,1553,1917,2282,2647,3013,3378,3653))
inds=cbind(c(274, 639, 1004, 1370, 1735, 2100, 2465, 2831, 3196),c(455,820,1186,1551,1916,2281,2647,3012,3377))
years.inds= years[times2]
days.inds= days[times2]

times3=c(275:366,1:121)

#make arrays for output, add dimension for future periods
#development
devel.out= array(NA, dim=c(length(lons),length(lats),length(times3),nrow(inds) ))
#survival
surv.out= array(NA, dim=c(length(lons),length(lats),length(times3),nrow(inds) ))

for(lon.k in 1:length(lons)){ #loop through longitude
  lats.sel2= which(!is.na(surface_temp[lon.k,,1]))#find latitudes with data
  
  if(length(lats.sel2)>0){ #check there's cells with data
    
    for(lat.k in lats.sel2){ #loop through latitudes with data
      
      for(yr.k in 1:nrow(inds)){ #loop through seasons
        
        #extract start and end dates
        inds.seas= inds[yr.k,1]:inds[yr.k,2] 
        
        #estimate growing degree days
        GDDs= surface_temp[lon.k,lat.k,inds.seas]-To #how many growing degree days per day
        #cummulative sum of GDDs
        cumGDDs=cumsum(GDDs) 
        
        for(time.k in 1:length(inds.seas)){ #estimate development time starting at different days
          
          #substract off starting value
          cumGDDs.t= cumGDDs-cumGDDs[time.k]
          
          #find first date the exceed G
          dev.ind= which.max(cumGDDs.t>G) - time.k  #development duration
          if(dev.ind>0) devel.out[lon.k,lat.k,time.k,yr.k]= dev.ind
          #To sAVE: DOY days.inds[inds.seas[dev.ind]]
          
          #estimate survival until reaching G
          #mean temp
          if(dev.ind>1){#if complete development
            temps= mean(surface_temp[lon.k,lat.k,inds.seas[time.k]:inds.seas[dev.ind+time.k]])
            #estimate survival
            surv.out[lon.k,lat.k,time.k,yr.k]= survi.function(dev.ind, temps)
          } #end check complete development
        } #end loop timing
      } #end loop seasons
    }#end latitude loop
  } #end check for data
} #end longitude loop

#devel.out=replace(devel.out,devel.out<15,NA)#replace values below the minimum possible time for develop by NA
devel.out2=devel.out[,,1:183,]#removing extra days (not season days)
surv.out2=surv.out[,,1:183,]#removing extra days (not season days)
times4=c(275:366,1:91)#removing extra days (not season days)

#plot out day to development assuming development starts on day 1 
e<-(c(-120,-40,-5,15,17,19,21,23,25,27,29,31,33,35,37,39))
image.plot(lons,lats,devel.out[,,162,1], col=my.colors(34),legend.lab = "days to megalopae phase",axis.args=list(at=e, labels=names(e)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

#plot out corresponding survival
s<-(c(0,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.7,0.8,0.9,1))
image.plot(lons,lats,surv.out2[,,162,1],col=my.colors(1000),legend.lab = "survival to megalopae phase",axis.args=list(at=s, labels=names(s)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

#plot average surv, devel and temp by column/row per year
surv.lat2= apply(surv.out2, MARGIN=c(1,2), FUN=mean, na.rm=TRUE)
s<-(c(0,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.7,0.75,0.8,0.9,1))
image.plot(lons,lats,surv.lat2,col=my.colors(1000),legend.lab = "survival to megalopae phase",legend.only=FALSE, zlim=c(0,1), axis.args=list(at=s, labels=names(s)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

devel.lat2= apply(devel.out2, MARGIN=c(1,2), FUN=mean, na.rm=TRUE)
e<-(c(18,20,22,24,26,28,30,32,34))
image.plot(lons,lats,devel.lat2,col=my.colors(1000),legend.lab = "Devel time",legend.only=FALSE, zlim=c(18,32),axis.args=list(at=e, labels=names(e)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

temp.out=array(surface_temp, dim=c(length(lons),length(lats),length(times4),nrow(inds)))
temp.lat2= apply(temp.out, MARGIN=c(1,2), FUN=mean, na.rm=TRUE)
e<-(c(22,24,26,28,30,32,34))
image.plot(lons,lats,temp.lat2,col=my.colors(1000),legend.lab = "Temp",legend.only=FALSE, zlim=c(22,34),axis.args=list(at=e, labels=names(e)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

#average surv, devel and temp by row per year
surv.lat= apply(surv.out2, MARGIN=c(2,4), FUN=mean, na.rm=TRUE)
surv.lat=replace(surv.lat,surv.lat<0.000001,0.01)
write.table(print(surv.lat),file="surv_row.csv", append=TRUE,sep=",",col.names=FALSE,row.names=FALSE)

devel.lat= apply(devel.out2, MARGIN=c(2,4), FUN=mean, na.rm=TRUE)
write.table(print(devel.lat),file="devel_row.csv", append=TRUE,sep=",",col.names=FALSE,row.names=FALSE)

temp.out=array(surface_temp, dim=c(length(lons),length(lats),length(times4),nrow(inds)))
temp.lat2= apply(temp.out, MARGIN=c(2,4), FUN=mean, na.rm=TRUE)
write.table(print(temp.lat2),file="temp_row.csv", append=TRUE,sep=",",col.names=FALSE,row.names=FALSE)

##############
##############MRI
memory.limit(size=50000)#inscrese the memory RAM size
#extract variables tos,lon,lat and time#need to fix
sea_surface.mri=ncvar_get(mri_2016_2025,"tos")#get infor bout SST
print(sea_surface.mri)
dim(sea_surface.mri)
sea_surface.mri=replace(sea_surface.mri,sea_surface.mri<1,NA)#replace 0 values from continent areas by NA
sea_surface.mri = sea_surface.mri - 273.15# convert units from kelvin to celcius
lons.mri= ncvar_get(mri_2016_2025,"lon") #get info about long
lons.mri= lons.mri[,1]
lats.mri= ncvar_get(mri_2016_2025,"lat") #get info about latitude
lats.mri= lats.mri[1,]
dim(lats.mri)
times.mri= ncvar_get(mri_2016_2025,"time") #get info about time
dim(times.mri)
times1.mri= as.Date(times.mri, origin="1850-01-01")#convert to Julian date, since 0001-01-01
times1.mri

#convert lon
lons.mri= convert.lon(lons.mri)

#check dimensions world plot
escala<-(c(0,2,4,6,16,18,20,22,24,26,28,30,32))
image.plot(sea_surface.mri[,,17],col=my.colors(1000), axis.args=list(at=escala, labels=names(escala)))

#estimate years and days
years.mri=as.numeric(format(times1.mri,"%Y"))
doys.mri= as.numeric(format(times1.mri,"%j"))

#make arrays for mri output
sst.mri= array(NA, dim= dim(surface_temp))
dim(sst.mri)
#match times
match.times2= match(times1, times1.mri)

#matching function
findit = function(x,vec){ 
  y = abs(vec - x) 
  if(all(is.na(y)))NA else which.min(y) }

#find closest lats and lons
match.lats2= sapply(lats,findit,lats.mri) 
match.lons2= sapply(lons,findit,lons.mri)

sst.mri= sea_surface.mri[match.lons2, match.lats2, match.times2]

#remove pacific ocean info
for(lat.id in 1:117){
  na1=which.max(is.na(sst.mri[,lat.id,]))
  sst.mri[1:na1,lat.id,]<-NA  
}

#delete +4 cell data from South American Atlantic coast 
nend= dim(sst.mri)[1]
for(lat.id in 1:89){
  na1= min(which(is.na(sst.mri[,lat.id,1])))
  #delete values before first NA
  sst.mri[1:na1,lat.id,]<-NA 
  #find coast
  coast= min(which(!is.na(sst.mri[,lat.id,1]))) 
  #find next island na
  w.isl=min(which(is.na(sst.mri[coast:nend,lat.id,1])))  
  while( is.finite(w.isl) ){
    #keep 4 coastal cells on each side
    if ((coast+w.isl-4)>(coast+4)) sst.mri[(coast+4):(coast+w.isl-4),lat.id,]<-NA
    #find next coast
    ind= coast+w.isl
    coast= min(which(!is.na(sst.mri[ind:nend,lat.id,1]))) 
    coast= ind+coast
    #find next island
    w.isl=min(which(is.na(sst.mri[coast:nend,lat.id,1])))
  }
  #last coastal grid cells
  if(coast+4 <nend) sst.mri[(coast+4):nend,lat.id,]<-NA 
}

#removing cells without islands
for(lat.id in 89){
  na2=which.min(is.na(sst.mri[,lat.id,]))  
  if((na2+96)<dim(sst.mri)[1]) sst.mri[(na2+96):dim(sst.mri)[1],lat.id,]<-NA  
} 
for(lat.id in 90:100){
  na2=which.min(is.na(sst.mri[,lat.id,]))  
  if((na2+26)<dim(sst.mri)[1]) sst.mri[(na2+26):dim(sst.mri)[1],lat.id,]<-NA  
} 
for(lat.id in 101){
  na2=which.min(is.na(sst.mri[,lat.id,]))  
  if((na2+24)<dim(sst.mri)[1]) sst.mri[(na2+24):dim(sst.mri)[1],lat.id,]<-NA  
} 
for(lat.id in 102){
  na2=which.min(is.na(sst.mri[,lat.id,]))  
  if((na2+37)<dim(sst.mri)[1]) sst.mri[(na2+37):dim(sst.mri)[1],lat.id,]<-NA  
}
for(lat.id in 103){
  na2=which.min(is.na(sst.mri[,lat.id,]))  
  if((na2+29)<dim(sst.mri)[1]) sst.mri[(na2+29):dim(sst.mri)[1],lat.id,]<-NA  
}
for(lat.id in 104:109){
  na2=which.min(is.na(sst.mri[,lat.id,]))  
  if((na2+30)<dim(sst.mri)[1]) sst.mri[(na2+30):dim(sst.mri)[1],lat.id,]<-NA  
}
for(lat.id in 110:112){
  na2=which.min(is.na(sst.mri[,lat.id,]))  
  if((na2+28)<dim(sst.mri)[1]) sst.mri[(na2+28):dim(sst.mri)[1],lat.id,]<-NA  
} 
for(lat.id in 113:114){
  na2=which.min(is.na(sst.mri[,lat.id,]))  
  if((na2+23)<dim(sst.mri)[1]) sst.mri[(na2+23):dim(sst.mri)[1],lat.id,]<-NA  
} 
for(lat.id in 115:117){
  na2=which.min(is.na(sst.mri[,lat.id,]))  
  if((na2+21)<dim(sst.mri)[1]) sst.mri[(na2+21):dim(sst.mri)[1],lat.id,]<-NA  
}

#Plot
my.colors = colorRampPalette(c("#5E85B8","#EDF0C0","#C13127"))#colors to use in graphs
e<-(c(15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45))
image.plot(lons,lats,sst.mri[,,30], col=my.colors(34),legend.lab = "Superficial Sea Temperature",axis.args=list(at=e, labels=names(e)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

#Set species' parameters Menippe nodifrons
To=9.8846 ###lower developmental temperature
G=384.6154 ### daily growing degree days

#survival function
survi.function=function(day,temp){
  surv= 2.7931035  -3.3789256*day + 1.7749461*day^2 -0.2621086*day^3 + 0.0122824*day^4 -0.0720098*temp +0.1335313*day^1*temp  -0.0693260*day^2*temp  +0.0101202*day^3*temp  -0.0004729*day^4*temp
  #constraint from zero to 1
  surv[surv<0]=0
  surv[surv>1]=1
  return(surv)  
}

# selecting days from January 1st to March 31th and October 1st to December 31th of yeach year
times2=c(1:121,275:485,640:850,1005:1216,1370:1583,1737:1946,2101:2311,2466:2677,2831:3043,3197:3407,3562:3653)
#select seasons, start and end dates
#inds=cbind(c(275, 640, 1005, 1370, 1737, 2101, 2466, 2831, 3197, 3562),c(457,821,1186,1553,1917,2282,2647,3013,3378,3653))
inds=cbind(c(274, 639, 1004, 1370, 1735, 2100, 2465, 2831, 3196),c(455,820,1186,1551,1916,2281,2647,3012,3377))
years.inds= years[times2]
doys.inds= doys[times2]

#366 or 365 days
times3=c(275:366,1:121)

#make arrays for output, add dimension for future periods
#development
devel.out= array(NA, dim=c(length(match.lons2),length(match.lats2),length(times3),nrow(inds) ))
#survival
surv.out= array(NA, dim=c(length(match.lons2),length(match.lats2),length(times3),nrow(inds) ))
for(lon.k in 1:length(lons)){ #loop through longitude
  lats.sel2= which(!is.na(sst.mri[lon.k,,1]))#find latitudes with data
  
  if(length(lats.sel2)>0){ #check there's cells with data
    
    for(lat.k in lats.sel2){ #loop through latitudes with data
      
      for(yr.k in 1:nrow(inds)){ #loop through seasons
        
        #extract start and end dates
        inds.seas= inds[yr.k,1]:inds[yr.k,2] 
        
        #estimate growing degree days
        GDDs= sst.mri[lon.k,lat.k,inds.seas]-To #how many growing degree days per day
        #cummulative sum of GDDs
        cumGDDs=cumsum(GDDs) 
        
        for(time.k in 1:length(inds.seas)){ #estimate development time starting at different days
          
          #substract off starting value
          cumGDDs.t= cumGDDs-cumGDDs[time.k]
          
          #find first date the exceed G
          dev.ind= which.max(cumGDDs.t>G) - time.k  #development duration
          if(dev.ind>0) devel.out[lon.k,lat.k,time.k,yr.k]= dev.ind
          #To sAVE: DOY days.inds[inds.seas[dev.ind]]
          
          #estimate survival until reaching G
          #mean temp
          if(dev.ind>1){#if complete development
            temps= mean(sst.mri[lon.k,lat.k,inds.seas[time.k]:inds.seas[dev.ind+time.k]])
            #estimate survival
            surv.out[lon.k,lat.k,time.k,yr.k]= survi.function(dev.ind, temps)
          } #end check complete development
        } #end loop timing
      } #end loop seasons
    }#end latitude loop
  } #end check for data
} #end longitude loop

#devel.out=replace(devel.out,devel.out<15,NA)#replace values below the minimum possible time for develop by NA
devel.out2=devel.out[,,1:183,]#removing extra days (not season days)
surv.out2=surv.out[,,1:183,]#removing extra days (not season days)
times4=c(275:366,1:91)#removing extra days (not season days)

#plot out day to development assuming development starts on day 1 
e<-(c(-120,-40,-5,15,17,19,21,23,25,27,29,31,33,35,37,39))
image.plot(lons,lats,devel.out[,,11,1], col=my.colors(34),legend.lab = "days to megalopae phase",axis.args=list(at=e, labels=names(e)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

#plot out corresponding survival
s<-(c(0,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.7,0.8,0.9,1))
image.plot(lons,lats,surv.out2[,,16,1],col=my.colors(1000),legend.lab = "survival to megalopae phase",axis.args=list(at=s, labels=names(s)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

#average surv, devel and temp by row per year
surv.lat= apply(surv.out2, MARGIN=c(2,4), FUN=mean, na.rm=TRUE)
surv.lat=replace(surv.lat,surv.lat<0.000001,0.01)
write.table(print(surv.lat),file="surv_row.csv", append=TRUE,sep=",",col.names=FALSE,row.names=FALSE)

devel.lat= apply(devel.out2, MARGIN=c(2,4), FUN=mean, na.rm=TRUE)
write.table(print(devel.lat),file="devel_row.csv", append=TRUE,sep=",",col.names=FALSE,row.names=FALSE)

temp.out=array(sst.mri, dim=c(length(lons),length(lats),length(times4),nrow(inds)))
temp.lat2= apply(temp.out, MARGIN=c(2,4), FUN=mean, na.rm=TRUE)
write.table(print(temp.lat2),file="temp_row.csv", append=TRUE,sep=",",col.names=FALSE,row.names=FALSE)


######
#CNRM
memory.limit(size=50000)#inscrese the memory RAM size
#extract variables tos,lon,lat and time
sea_surface.cnrm=ncvar_get(cnrm_2016_2025,"tos")#get infor bout SST
print(sea_surface.cnrm)
dim(sea_surface.cnrm)
sea_surface.cnrm = sea_surface.cnrm - 273.15# convert units from kelvin to celcius
lons.cnrm= ncvar_get(cnrm_2016_2025,"lon") #get info about long
dim(lons.cnrm)
lons.cnrm= lons.cnrm[,1]
lats.cnrm= ncvar_get(cnrm_2016_2025,"lat") #get info about latitude
dim(lats.cnrm)
lats.cnrm= lats.cnrm[1,]
times.cnrm= ncvar_get(cnrm_2016_2025,"time") #get info about time
dim(times.cnrm)
times1.cnrm= as.Date(times.cnrm, origin="2006-01-01")#convert to Julian date, since 0001-01-01
times1.cnrm

#convert longituide
lons.cnrm= convert.lon(lons.cnrm)

#estimate years and doys
years.cnrm=as.numeric(format(times1.cnrm,"%Y"))
doys.cnrm= as.numeric(format(times1.cnrm,"%j"))

#FIND CNRM VALUES THAT CORRESPOND TO ACESS GRID (lats.cnrm>(90)&lats.cnrm<(204)-lons.cnrm>(188)&lons.cnrm<(258))
#make arrays for mri output
sst.cnrm= array(NA, dim= dim(surface_temp))

#match times
match.times= match(times1, times1.cnrm)

#matching function
findit = function(x,vec){ 
  y = abs(vec - x) 
  if(all(is.na(y)))NA else which.min(y) }

#find closest lats and lons
match.lats= sapply(lats,findit,lats.cnrm) 
match.lons= sapply(lons,findit,lons.cnrm) 

sst.cnrm= sea_surface.cnrm[match.lons, match.lats, match.times]
dim(sst.cnrm)

#remove pacific ocean info
for(lat.id in 1:117){
  na1=which.max(is.na(sst.cnrm[,lat.id,]))
  sst.cnrm[1:na1,lat.id,]<-NA  
}

#delete +4 cell data from South American Atlantic coast 
nend= dim(sst.cnrm)[1]
for(lat.id in 1:89){
  na1= min(which(is.na(sst.cnrm[,lat.id,1])))
  #delete values before first NA
  sst.cnrm[1:na1,lat.id,]<-NA 
  #find coast
  coast= min(which(!is.na(sst.cnrm[,lat.id,1]))) 
  #find next island na
  w.isl=min(which(is.na(sst.cnrm[coast:nend,lat.id,1])))  
  while( is.finite(w.isl) ){
    #keep 4 coastal cells on each side
    if ((coast+w.isl-4)>(coast+4)) sst.cnrm[(coast+4):(coast+w.isl-4),lat.id,]<-NA
    #find next coast
    ind= coast+w.isl
    coast= min(which(!is.na(sst.cnrm[ind:nend,lat.id,1]))) 
    coast= ind+coast
    #find next island
    w.isl=min(which(is.na(sst.cnrm[coast:nend,lat.id,1])))
  }
  #last coastal grid cells
  if(coast+4 <nend) sst.cnrm[(coast+4):nend,lat.id,]<-NA 
}

#removing cells without islands
for(lat.id in 89){
  na2=which.min(is.na(sst.cnrm[,lat.id,]))  
  if((na2+96)<dim(sst.cnrm)[1]) sst.cnrm[(na2+96):dim(sst.cnrm)[1],lat.id,]<-NA  
} 
for(lat.id in 90:100){
  na2=which.min(is.na(sst.cnrm[,lat.id,]))  
  if((na2+26)<dim(sst.cnrm)[1]) sst.cnrm[(na2+26):dim(sst.cnrm)[1],lat.id,]<-NA  
} 
for(lat.id in 101){
  na2=which.min(is.na(sst.cnrm[,lat.id,]))  
  if((na2+24)<dim(sst.cnrm)[1]) sst.cnrm[(na2+24):dim(sst.cnrm)[1],lat.id,]<-NA  
} 
for(lat.id in 102){
  na2=which.min(is.na(sst.cnrm[,lat.id,]))  
  if((na2+37)<dim(sst.cnrm)[1]) sst.cnrm[(na2+37):dim(sst.cnrm)[1],lat.id,]<-NA  
}
for(lat.id in 103){
  na2=which.min(is.na(sst.cnrm[,lat.id,]))  
  if((na2+29)<dim(sst.cnrm)[1]) sst.cnrm[(na2+29):dim(sst.cnrm)[1],lat.id,]<-NA  
}
for(lat.id in 104:109){
  na2=which.min(is.na(sst.cnrm[,lat.id,]))  
  if((na2+30)<dim(sst.cnrm)[1]) sst.cnrm[(na2+30):dim(sst.cnrm)[1],lat.id,]<-NA  
}
for(lat.id in 110:112){
  na2=which.min(is.na(sst.cnrm[,lat.id,]))  
  if((na2+28)<dim(sst.cnrm)[1]) sst.cnrm[(na2+28):dim(sst.cnrm)[1],lat.id,]<-NA  
} 
for(lat.id in 113:114){
  na2=which.min(is.na(sst.cnrm[,lat.id,]))  
  if((na2+23)<dim(sst.cnrm)[1]) sst.cnrm[(na2+23):dim(sst.cnrm)[1],lat.id,]<-NA  
} 
for(lat.id in 115:117){
  na2=which.min(is.na(sst.cnrm[,lat.id,]))  
  if((na2+21)<dim(sst.cnrm)[1]) sst.cnrm[(na2+21):dim(sst.cnrm)[1],lat.id,]<-NA  
}

#Plot
my.colors = colorRampPalette(c("#5E85B8","#EDF0C0","#C13127"))#colors to use in graphs
e<-(c(15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45))
image.plot(lons,lats,sst.cnrm[,,30], col=my.colors(34),legend.lab = "Superficial Sea Temperature",axis.args=list(at=e, labels=names(e)))
data(wrld_simpl)
plot(elide(wrld_simpl), add = TRUE)

#Set species' parameters Menippe nodifrons
To=9.8846 ###lower developmental temperature
G=384.6154 ### daily growing degree days

#survival function
survi.function=function(day,temp){
  surv= 2.7931035  -3.3789256*day + 1.7749461*day^2 -0.2621086*day^3 + 0.0122824*day^4 -0.0720098*temp +0.1335313*day^1*temp  -0.0693260*day^2*temp  +0.0101202*day^3*temp  -0.0004729*day^4*temp
  #constraint from zero to 1
  surv[surv<0]=0
  surv[surv>1]=1
  return(surv)  
}

# selecting days from October 1st to December 31th and January 1st to March 31th (information for each season) 
inds=cbind(c(1,92),c(91,242))
times4=c(1:242)

# selecting days from January 1st to March 31th and October 1st to December 31th of yeach year
times2=c(1:121,275:485,640:850,1005:1216,1370:1583,1737:1946,2101:2311,2466:2677,2831:3043,3197:3407,3562:3653)
#select seasons, start and end dates
#inds=cbind(c(275, 640, 1005, 1370, 1737, 2101, 2466, 2831, 3197, 3562),c(457,821,1186,1553,1917,2282,2647,3013,3378,3653))
inds=cbind(c(274, 639, 1004, 1370, 1735, 2100, 2465, 2831, 3196),c(455,820,1186,1551,1916,2281,2647,3012,3377))
years.inds= years[times2]
days.inds= days[times2]

times3=c(275:366,1:121)

# selecting days from January 1st to March 31th and October 1st to December 31th of yeach year
times2=c(1:121,275:485,640:850,1005:1216,1370:1583,1737:1946,2101:2311,2466:2677,2831:3043,3197:3407,3562:3653)
#select seasons, start and end dates
#inds=cbind(c(275, 640, 1005, 1370, 1737, 2101, 2466, 2831, 3197, 3562),c(457,821,1186,1553,1917,2282,2647,3013,3378,3653))
inds=cbind(c(274, 639, 1004, 1370, 1735, 2100, 2465, 2831, 3196),c(455,820,1186,1551,1916,2281,2647,3012,3377))
years.inds= years[times2]
doys.inds= doys[times2]

#366 or 365 days
times3=c(275:366,1:121)

#make arrays for output, add dimension for future periods
#development
devel.out= array(NA, dim=c(length(match.lons),length(match.lats),length(times3),nrow(inds) ))
#survival
surv.out= array(NA, dim=c(length(match.lons),length(match.lats),length(times3),nrow(inds) ))
for(lon.k in 1:length(lons)){ #loop through longitude
  lats.sel2= which(!is.na(sst.cnrm[lon.k,,1]))#find latitudes with data
  
  if(length(lats.sel2)>0){ #check there's cells with data
    
    for(lat.k in lats.sel2){ #loop through latitudes with data
      
      for(yr.k in 1:nrow(inds)){ #loop through seasons
        
        #extract start and end dates
        inds.seas= inds[yr.k,1]:inds[yr.k,2] 
        
        #estimate growing degree days
        GDDs= sst.cnrm[lon.k,lat.k,inds.seas]-To #how many growing degree days per day
        #cummulative sum of GDDs
        cumGDDs=cumsum(GDDs) 
        
        for(time.k in 1:length(inds.seas)){ #estimate development time starting at different days
          
          #substract off starting value
          cumGDDs.t= cumGDDs-cumGDDs[time.k]
          
          #find first date the exceed G
          dev.ind= which.max(cumGDDs.t>G) - time.k  #development duration
          if(dev.ind>0) devel.out[lon.k,lat.k,time.k,yr.k]= dev.ind
          #To sAVE: DOY days.inds[inds.seas[dev.ind]]
          
          #estimate survival until reaching G
          #mean temp
          if(dev.ind>1){#if complete development
            temps= mean(sst.cnrm[lon.k,lat.k,inds.seas[time.k]:inds.seas[dev.ind+time.k]])
            #estimate survival
            surv.out[lon.k,lat.k,time.k,yr.k]= survi.function(dev.ind, temps)
          } #end check complete development
        } #end loop timing
      } #end loop seasons
    }#end latitude loop
  } #end check for data
} #end longitude loop

#plot out day to development assuming development starts on day 1 
devel.out=replace(devel.out,devel.out<15,NA)
devel.out2=devel.out[,,1:183,]
surv.out2=surv.out[,,1:183,]
times4=c(275:366,1:91)

#average surv, devel and temp by row per year
#average surv, devel and temp by row per year
surv.lat= apply(surv.out2, MARGIN=c(2,4), FUN=mean, na.rm=TRUE)
surv.lat=replace(surv.lat,surv.lat<0.000001,0.01)
write.table(print(surv.lat),file="surv_row.csv", append=TRUE,sep=",",col.names=FALSE,row.names=FALSE)

devel.lat= apply(devel.out2, MARGIN=c(2,4), FUN=mean, na.rm=TRUE)
write.table(print(devel.lat),file="devel_row.csv", append=TRUE,sep=",",col.names=FALSE,row.names=FALSE)

temp.out=array(sst.cnrm, dim=c(length(lons),length(lats),length(times4),nrow(inds)))
temp.lat2= apply(temp.out, MARGIN=c(2,4), FUN=mean, na.rm=TRUE)
write.table(print(temp.lat2),file="temp_row.csv", append=TRUE,sep=",",col.names=FALSE,row.names=FALSE)
